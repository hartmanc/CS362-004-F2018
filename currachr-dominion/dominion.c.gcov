        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 25570 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
    25570:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 44%
branch  1 taken 56%
    11306:   10:    return 1;
    14264:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 75%
branch  1 taken 25%
    10668:   12:    return -1;
     3596:   13:  return 0;
    25570:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 7 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
        7:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       14:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      154:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     1540:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     1330:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      700:   65:        }
       70:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        7:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        7:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        7:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        7:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        7:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  102:  state->supplyCount[silver] = 40;
        7:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     2310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
     1085:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      133:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:		{
       14:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
       14:  116:		    state->supplyCount[i] = 8; 
       14:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
       14:  119:		}
        -:  120:	      else
        -:  121:		{
       56:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       70:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1015:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
     1015:  130:	}
        -:  131:
      140:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       42:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
       14:  140:      state->deckCount[i] = 0;
      112:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       42:  143:	  state->deck[i][j] = estate;
       42:  144:	  state->deckCount[i]++;
       42:  145:	}
      224:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
       98:  148:	  state->deck[i][j] = copper;
       98:  149:	  state->deckCount[i]++;		
       98:  150:	}
       14:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       42:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
       14:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       14:  160:    }
        -:  161:
        -:  162:  //draw player hands
       42:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       14:  166:      state->handCount[i] = 0;
       14:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       14:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      392:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      189:  178:      state->embargoTokens[i] = 0;
      189:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        7:  182:  state->outpostPlayed = 0;
        7:  183:  state->phase = 0;
        7:  184:  state->numActions = 1;
        7:  185:  state->numBuys = 1;
        7:  186:  state->playedCardCount = 0;
        7:  187:  state->whoseTurn = 0;
        7:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       84:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       35:  193:    drawCard(state->whoseTurn, state);
       35:  194:  }
        -:  195:
        7:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        7:  198:  return 0;
        7:  199:}
        -:  200:
function shuffle called 49 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       49:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       49:  209:  if (state->deckCount[player] < 1)
branch  0 taken 33%
branch  1 taken 67%
       16:  210:    return -1;
       33:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     9946:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1%
     4940:  215:    card = floor(Random() * state->deckCount[player]);
     4940:  216:    newDeck[newDeckPos] = state->deck[player][card];
     4940:  217:    newDeckPos++;
   799752:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1%
   394936:  219:      state->deck[player][i] = state->deck[player][i+1];
   394936:  220:    }
     4940:  221:    state->deckCount[player]--;
        -:  222:  }
     9946:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1%
     4940:  224:    state->deck[player][i] = newDeck[i];
     4940:  225:    state->deckCount[player]++;
     4940:  226:  }
        -:  227:
       33:  228:  return 0;
       49:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 5 returned 100% blocks executed 100%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        5:  280:  who = state->whoseTurn;
        -:  281:
        5:  282:  if (state->numBuys < 1){
branch  0 taken 20%
branch  1 taken 80%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        4:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 25%
branch  1 taken 75%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        3:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 33%
branch  1 taken 67%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        2:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        2:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        2:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        2:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        2:  308:  return 0;
        5:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 7 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
        7:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 3010 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
     3010:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 17%
branch  1 taken 83%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      260:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 5%
branch  1 taken 95%
        -:  405:	{
        6:  406:	  j++;
        6:  407:	}
      125:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 20%
branch  1 taken 80%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        6:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 14107 returned 100% blocks executed 91%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    14107:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     9638:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1%
     4800:  534:      state->deck[player][i] = state->discard[player][i];
     4800:  535:      state->discard[player][i] = -1;
     4800:  536:    }
        -:  537:
       19:  538:    state->deckCount[player] = state->discardCount[player];
       19:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       19:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       19:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       19:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       19:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       19:  559:    if (deckCounter == 0)
branch  0 taken 0%
branch  1 taken 100%
    #####:  560:      return -1;
        -:  561:
       19:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       19:  563:    state->deckCount[player]--;
       19:  564:    state->handCount[player]++;//Increment hand count
       19:  565:  }
        -:  566:
        -:  567:  else{
    14088:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    14088:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    14088:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    14088:  576:    state->deckCount[player]--;
    14088:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    14107:  580:  return 0;
    14107:  581:}
        -:  582:
function getCost called 5 returned 100% blocks executed 19%
        -:  583:int getCost(int cardNumber)
        -:  584:{
        5:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 20%
branch  4 taken 40%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 40%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        2:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        5:  644:}
        -:  645:
function cardEffect called 3003 returned 100% blocks executed 10%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
     3003:  653:  int currentPlayer = whoseTurn(state);
     3003:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
     3003:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
     3003:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
     3003:  660:  int z = 0;// this is the counter for the temp hand
     3003:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 51%
branch  1 taken 49%
     1542:  662:    nextPlayer = 0;
     1542:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     3003:  667:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 1%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
    22134:  670:      while(drawntreasure<2){
branch  0 taken 91%
branch  1 taken 9%
    10067:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
       16:  672:	  shuffle(currentPlayer, state);
       16:  673:	}
    10067:  674:	drawCard(currentPlayer, state);
    10067:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    28217:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 93%
branch  1 taken 7%
branch  2 taken 93%
branch  3 taken 7%
branch  4 taken 8%
branch  5 taken 92%
     2000:  677:	  drawntreasure++;
        -:  678:	else{
     8067:  679:	  temphand[z]=cardDrawn;
     8067:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     8067:  681:	  z++;
        -:  682:	}
        -:  683:      }
    18134:  684:      while(z-1>=0){
branch  0 taken 89%
branch  1 taken 11%
     8067:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     8067:  686:	z=z-1;
        -:  687:      }
        -:  688:      //put played card in played card pile
     1000:  689:      discardCard(handPos, currentPlayer, state, 0);
     1000:  690:      return 0;
        -:  691:			
        -:  692:    case council_room:
        -:  693:      //+4 Cards
    #####:  694:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  695:	{
    #####:  696:	  drawCard(currentPlayer, state);
    #####:  697:	}
        -:  698:			
        -:  699:      //+1 Buy
    #####:  700:      state->numBuys++;
        -:  701:			
        -:  702:      //Each other player draws a card
    #####:  703:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  704:	{
    #####:  705:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  706:	    {
    #####:  707:	      drawCard(i, state);
    #####:  708:	    }
    #####:  709:	}
        -:  710:			
        -:  711:      //put played card in played card pile
    #####:  712:      discardCard(handPos, currentPlayer, state, 0);
        -:  713:			
    #####:  714:      return 0;
        -:  715:			
        -:  716:    case feast:
        -:  717:      //gain card with cost up to 5
        -:  718:      //Backup hand
    #####:  719:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  720:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  721:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  722:      }
        -:  723:      //Backup hand
        -:  724:
        -:  725:      //Update Coins for Buy
    #####:  726:      updateCoins(currentPlayer, state, 5);
    #####:  727:      x = 1;//Condition to loop on
    #####:  728:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  729:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  730:	  if (DEBUG)
        -:  731:	    printf("None of that card left, sorry!\n");
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  735:	  }
    #####:  736:	}
    #####:  737:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  738:	  printf("That card is too expensive!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  742:	  }
    #####:  743:	}
        -:  744:	else{
        -:  745:
        -:  746:	  if (DEBUG){
        -:  747:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:	  }
        -:  749:
    #####:  750:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  751:	  x = 0;//No more buying cards
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
        -:  757:	}
        -:  758:      }     
        -:  759:
        -:  760:      //Reset Hand
    #####:  761:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  762:	state->hand[currentPlayer][i] = temphand[i];
    #####:  763:	temphand[i] = -1;
    #####:  764:      }
        -:  765:      //Reset Hand
        -:  766:      			
    #####:  767:      return 0;
        -:  768:			
        -:  769:    case gardens:
    #####:  770:      return -1;
        -:  771:			
        -:  772:    case mine:
    #####:  773:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:
    #####:  775:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:		
    #####:  780:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  781:	{
    #####:  782:	  return -1;
        -:  783:	}
        -:  784:
    #####:  785:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  786:	{
    #####:  787:	  return -1;
        -:  788:	}
        -:  789:
    #####:  790:      gainCard(choice2, state, 2, currentPlayer);
        -:  791:
        -:  792:      //discard card from hand
    #####:  793:      discardCard(handPos, currentPlayer, state, 0);
        -:  794:
        -:  795:      //discard trashed card
    #####:  796:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  797:	{
    #####:  798:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  799:	    {
    #####:  800:	      discardCard(i, currentPlayer, state, 0);			
    #####:  801:	      break;
        -:  802:	    }
    #####:  803:	}
        -:  804:			
    #####:  805:      return 0;
        -:  806:			
        -:  807:    case remodel:
    #####:  808:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  809:
    #####:  810:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  811:	{
    #####:  812:	  return -1;
        -:  813:	}
        -:  814:
    #####:  815:      gainCard(choice2, state, 0, currentPlayer);
        -:  816:
        -:  817:      //discard card from hand
    #####:  818:      discardCard(handPos, currentPlayer, state, 0);
        -:  819:
        -:  820:      //discard trashed card
    #####:  821:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  822:	{
    #####:  823:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  824:	    {
    #####:  825:	      discardCard(i, currentPlayer, state, 0);			
    #####:  826:	      break;
        -:  827:	    }
    #####:  828:	}
        -:  829:
        -:  830:
    #####:  831:      return 0;
        -:  832:		
        -:  833:    case smithy:
        -:  834:      //+3 Cards
     8008:  835:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  836:	{
     3003:  837:	  drawCard(currentPlayer, state);
     3003:  838:	}
        -:  839:			
        -:  840:      //discard card from hand
     1001:  841:      discardCard(handPos, currentPlayer, state, 0);
     1001:  842:      return 0;
        -:  843:		
        -:  844:    case village:
        -:  845:      //+1 Card
     1001:  846:      drawCard(currentPlayer, state);
        -:  847:			
        -:  848:      //+2 Actions
     1001:  849:      state->numActions = state->numActions + 2;
        -:  850:			
        -:  851:      //discard played card from hand
     1001:  852:      discardCard(handPos, currentPlayer, state, 0);
     1001:  853:      return 0;
        -:  854:		
        -:  855:    case baron:
    #####:  856:      state->numBuys++;//Increase buys by 1!
    #####:  857:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  858:	int p = 0;//Iterator for hand!
    #####:  859:	int card_not_discarded = 1;//Flag for discard set!
    #####:  860:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  861:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  862:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  863:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  864:	    state->discardCount[currentPlayer]++;
    #####:  865:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  866:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  867:	    }
    #####:  868:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  869:	    state->handCount[currentPlayer]--;
    #####:  870:	    card_not_discarded = 0;//Exit the loop
    #####:  871:	  }
    #####:  872:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  873:	    if(DEBUG) {
        -:  874:	      printf("No estate cards in your hand, invalid choice\n");
        -:  875:	      printf("Must gain an estate if there are any\n");
        -:  876:	    }
    #####:  877:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  878:	      gainCard(estate, state, 0, currentPlayer);
    #####:  879:	      state->supplyCount[estate]--;//Decrement estates
    #####:  880:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  881:		isGameOver(state);
    #####:  882:	      }
    #####:  883:	    }
    #####:  884:	    card_not_discarded = 0;//Exit the loop
    #####:  885:	  }
        -:  886:			    
        -:  887:	  else{
    #####:  888:	    p++;//Next card
        -:  889:	  }
        -:  890:	}
    #####:  891:      }
        -:  892:			    
        -:  893:      else{
    #####:  894:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  895:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  896:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  897:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  898:	    isGameOver(state);
    #####:  899:	  }
    #####:  900:	}
        -:  901:      }
        -:  902:	    
        -:  903:      
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case great_hall:
        -:  907:      //+1 Card
        1:  908:      drawCard(currentPlayer, state);
        -:  909:			
        -:  910:      //+1 Actions
        1:  911:      state->numActions++;
        -:  912:			
        -:  913:      //discard card from hand
        1:  914:      discardCard(handPos, currentPlayer, state, 0);
        1:  915:      return 0;
        -:  916:		
        -:  917:    case minion:
        -:  918:      //+1 action
    #####:  919:      state->numActions++;
        -:  920:			
        -:  921:      //discard card from hand
    #####:  922:      discardCard(handPos, currentPlayer, state, 0);
        -:  923:			
    #####:  924:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  925:	{
    #####:  926:	  state->coins = state->coins + 2;
    #####:  927:	}
        -:  928:			
    #####:  929:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  930:	{
        -:  931:	  //discard hand
    #####:  932:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  933:	    {
    #####:  934:	      discardCard(handPos, currentPlayer, state, 0);
        -:  935:	    }
        -:  936:				
        -:  937:	  //draw 4
    #####:  938:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  939:	    {
    #####:  940:	      drawCard(currentPlayer, state);
    #####:  941:	    }
        -:  942:				
        -:  943:	  //other players discard hand and redraw if hand size > 4
    #####:  944:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  945:	    {
    #####:  946:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  947:		{
    #####:  948:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  949:		    {
        -:  950:		      //discard hand
    #####:  951:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  952:			{
    #####:  953:			  discardCard(handPos, i, state, 0);
        -:  954:			}
        -:  955:							
        -:  956:		      //draw 4
    #####:  957:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  958:			{
    #####:  959:			  drawCard(i, state);
    #####:  960:			}
    #####:  961:		    }
    #####:  962:		}
    #####:  963:	    }
        -:  964:				
    #####:  965:	}
    #####:  966:      return 0;
        -:  967:		
        -:  968:    case steward:
    #####:  969:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  970:	{
        -:  971:	  //+2 cards
    #####:  972:	  drawCard(currentPlayer, state);
    #####:  973:	  drawCard(currentPlayer, state);
    #####:  974:	}
    #####:  975:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  976:	{
        -:  977:	  //+2 coins
    #####:  978:	  state->coins = state->coins + 2;
    #####:  979:	}
        -:  980:      else
        -:  981:	{
        -:  982:	  //trash 2 cards in hand
    #####:  983:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  984:	  discardCard(choice3, currentPlayer, state, 1);
        -:  985:	}
        -:  986:			
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
    #####:  989:      return 0;
        -:  990:		
        -:  991:    case tribute:
    #####:  992:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  993:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  994:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  995:	  state->deckCount[nextPlayer]--;
    #####:  996:	}
    #####:  997:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  998:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  999:	  state->discardCount[nextPlayer]--;
    #####: 1000:	}
        -: 1001:	else{
        -: 1002:	  //No Card to Reveal
        -: 1003:	  if (DEBUG){
        -: 1004:	    printf("No cards to reveal\n");
        -: 1005:	  }
        -: 1006:	}
    #####: 1007:      }
        -: 1008:	    
        -: 1009:      else{
    #####: 1010:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1011:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1012:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1013:	    state->deckCount[nextPlayer]++;
    #####: 1014:	    state->discard[nextPlayer][i] = -1;
    #####: 1015:	    state->discardCount[nextPlayer]--;
    #####: 1016:	  }
        -: 1017:			    
    #####: 1018:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1019:	} 
    #####: 1020:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1022:	state->deckCount[nextPlayer]--;
    #####: 1023:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1025:	state->deckCount[nextPlayer]--;
        -: 1026:      }    
        -: 1027:		       
    #####: 1028:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1029:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1030:	state->playedCardCount++;
    #####: 1031:	tributeRevealedCards[1] = -1;
    #####: 1032:      }
        -: 1033:
    #####: 1034:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1035:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1036:	  state->coins += 2;
    #####: 1037:	}
        -: 1038:		    
    #####: 1039:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1040:	  drawCard(currentPlayer, state);
    #####: 1041:	  drawCard(currentPlayer, state);
    #####: 1042:	}
        -: 1043:	else{//Action Card
    #####: 1044:	  state->numActions = state->numActions + 2;
        -: 1045:	}
    #####: 1046:      }
        -: 1047:	    
    #####: 1048:      return 0;
        -: 1049:		
        -: 1050:    case ambassador:
    #####: 1051:      j = 0;		//used to check if player has enough cards to discard
        -: 1052:
    #####: 1053:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
    #####: 1058:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:
    #####: 1063:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1064:	{
    #####: 1065:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1066:	    {
    #####: 1067:	      j++;
    #####: 1068:	    }
    #####: 1069:	}
    #####: 1070:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1071:	{
    #####: 1072:	  return -1;				
        -: 1073:	}
        -: 1074:
        -: 1075:      if (DEBUG) 
        -: 1076:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1077:
        -: 1078:      //increase supply count for choosen card by amount being discarded
    #####: 1079:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1080:			
        -: 1081:      //each other player gains a copy of revealed card
    #####: 1082:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1083:	{
    #####: 1084:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1085:	    {
    #####: 1086:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1087:	    }
    #####: 1088:	}
        -: 1089:
        -: 1090:      //discard played card from hand
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1092:
        -: 1093:      //trash copies of cards returned to supply
    #####: 1094:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1095:	{
    #####: 1096:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1097:	    {
    #####: 1098:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1099:		{
    #####: 1100:		  discardCard(i, currentPlayer, state, 1);
    #####: 1101:		  break;
        -: 1102:		}
    #####: 1103:	    }
    #####: 1104:	}			
        -: 1105:
    #####: 1106:      return 0;
        -: 1107:		
        -: 1108:    case cutpurse:
        -: 1109:
    #####: 1110:      updateCoins(currentPlayer, state, 2);
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1114:	    {
    #####: 1115:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1116:		{
    #####: 1117:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1118:		    {
    #####: 1119:		      discardCard(j, i, state, 0);
    #####: 1120:		      break;
        -: 1121:		    }
    #####: 1122:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1123:		    {
    #####: 1124:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1125:			{
        -: 1126:			  if (DEBUG)
        -: 1127:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1128:			}	
    #####: 1129:		      break;
        -: 1130:		    }		
    #####: 1131:		}
        -: 1132:					
    #####: 1133:	    }
        -: 1134:				
    #####: 1135:	}				
        -: 1136:
        -: 1137:      //discard played card from hand
    #####: 1138:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1139:
    #####: 1140:      return 0;
        -: 1141:
        -: 1142:		
        -: 1143:    case embargo: 
        -: 1144:      //+2 Coins
    #####: 1145:      state->coins = state->coins + 2;
        -: 1146:			
        -: 1147:      //see if selected pile is in play
    #####: 1148:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  return -1;
        -: 1151:	}
        -: 1152:			
        -: 1153:      //add embargo token to selected supply pile
    #####: 1154:      state->embargoTokens[choice1]++;
        -: 1155:			
        -: 1156:      //trash card
    #####: 1157:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1158:      return 0;
        -: 1159:		
        -: 1160:    case outpost:
        -: 1161:      //set outpost flag
    #####: 1162:      state->outpostPlayed++;
        -: 1163:			
        -: 1164:      //discard card
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1166:      return 0;
        -: 1167:		
        -: 1168:    case salvager:
        -: 1169:      //+1 buy
    #####: 1170:      state->numBuys++;
        -: 1171:			
    #####: 1172:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1173:	{
        -: 1174:	  //gain coins equal to trashed card
    #####: 1175:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1176:	  //trash card
    #####: 1177:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1178:	}
        -: 1179:			
        -: 1180:      //discard card
    #####: 1181:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1182:      return 0;
        -: 1183:		
        -: 1184:    case sea_hag:
    #####: 1185:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1186:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1187:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1188:	  state->discardCount[i]++;
    #####: 1189:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1190:	}
    #####: 1191:      }
    #####: 1192:      return 0;
        -: 1193:		
        -: 1194:    case treasure_map:
        -: 1195:      //search hand for another treasure_map
    #####: 1196:      index = -1;
    #####: 1197:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1198:	{
    #####: 1199:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1200:	    {
    #####: 1201:	      index = i;
    #####: 1202:	      break;
        -: 1203:	    }
    #####: 1204:	}
    #####: 1205:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1206:	{
        -: 1207:	  //trash both treasure cards
    #####: 1208:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1209:	  discardCard(index, currentPlayer, state, 1);
        -: 1210:
        -: 1211:	  //gain 4 Gold cards
    #####: 1212:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1213:	    {
    #####: 1214:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1215:	    }
        -: 1216:				
        -: 1217:	  //return success
    #####: 1218:	  return 1;
        -: 1219:	}
        -: 1220:			
        -: 1221:      //no second treasure_map found in hand
    #####: 1222:      return -1;
        -: 1223:    }
        -: 1224:	
    #####: 1225:  return -1;
     3003: 1226:}
        -: 1227:
function discardCard called 3003 returned 100% blocks executed 80%
        -: 1228:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1229:{
        -: 1230:	
        -: 1231:  //if card is not trashed, added to Played pile 
     3003: 1232:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1233:    {
        -: 1234:      //add card to played pile
     3003: 1235:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     3003: 1236:      state->playedCardCount++;
     3003: 1237:    }
        -: 1238:	
        -: 1239:  //set played card to -1
     3003: 1240:  state->hand[currentPlayer][handPos] = -1;
        -: 1241:	
        -: 1242:  //remove card from player's hand
     3003: 1243:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1244:    {
        -: 1245:      //reduce number of cards in hand
    #####: 1246:      state->handCount[currentPlayer]--;
    #####: 1247:    }
     3003: 1248:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1249:    {
        -: 1250:      //reduce number of cards in hand
    #####: 1251:      state->handCount[currentPlayer]--;
    #####: 1252:    }
        -: 1253:  else 	
        -: 1254:    {
        -: 1255:      //replace discarded card with last card in hand
     3003: 1256:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1257:      //set last card to -1
     3003: 1258:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1259:      //reduce number of cards in hand
     3003: 1260:      state->handCount[currentPlayer]--;
        -: 1261:    }
        -: 1262:	
     3003: 1263:  return 0;
        -: 1264:}
        -: 1265:
function gainCard called 2 returned 100% blocks executed 72%
        -: 1266:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1267:{
        -: 1268:  //Note: supplyPos is enum of choosen card
        -: 1269:	
        -: 1270:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1271:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1272:    {
    #####: 1273:      return -1;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //added card for [whoseTurn] current player:
        -: 1277:  // toFlag = 0 : add to discard
        -: 1278:  // toFlag = 1 : add to deck
        -: 1279:  // toFlag = 2 : add to hand
        -: 1280:
        2: 1281:  if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1282:    {
    #####: 1283:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1284:      state->deckCount[player]++;
    #####: 1285:    }
        2: 1286:  else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1287:    {
    #####: 1288:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1289:      state->handCount[player]++;
    #####: 1290:    }
        -: 1291:  else
        -: 1292:    {
        2: 1293:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1294:      state->discardCount[player]++;
        -: 1295:    }
        -: 1296:	
        -: 1297:  //decrease number in supply pile
        2: 1298:  state->supplyCount[supplyPos]--;
        -: 1299:	 
        2: 1300:  return 0;
        2: 1301:}
        -: 1302:
function updateCoins called 7 returned 100% blocks executed 57%
        -: 1303:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1304:{
        -: 1305:  int i;
        -: 1306:	
        -: 1307:  //reset coin count
        7: 1308:  state->coins = 0;
        -: 1309:
        -: 1310:  //add coins for each Treasure card in player's hand
       84: 1311:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1312:    {
       35: 1313:      if (state->hand[player][i] == copper)
branch  0 taken 100%
branch  1 taken 0%
        -: 1314:	{
       35: 1315:	  state->coins += 1;
       35: 1316:	}
    #####: 1317:      else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1318:	{
    #####: 1319:	  state->coins += 2;
    #####: 1320:	}
    #####: 1321:      else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1322:	{
    #####: 1323:	  state->coins += 3;
    #####: 1324:	}	
       35: 1325:    }	
        -: 1326:
        -: 1327:  //add bonus
        7: 1328:  state->coins += bonus;
        -: 1329:
        7: 1330:  return 0;
        -: 1331:}
        -: 1332:
        -: 1333:
        -: 1334://end of dominion.c
        -: 1335:
